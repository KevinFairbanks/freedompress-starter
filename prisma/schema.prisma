// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String?
  password    String?   // Hashed password for credential login
  role        Role      @default(USER)
  isActive    Boolean   @default(true)
  emailVerified DateTime?
  
  // Account security
  failedAttempts Int      @default(0)
  lockedUntil   DateTime?
  lastLogin     DateTime?
  
  // Audit fields
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // NextAuth.js related fields
  accounts    Account[]
  sessions    Session[]
  auditLogs   AuditLog[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Setting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  type        String   @default("string")
  category    String   @default("general")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("settings")
}

model Module {
  id          String        @id @default(cuid())
  name        String        @unique
  version     String
  status      ModuleStatus  @default(INACTIVE)
  config      String?       // JSON configuration - should be validated
  configHash  String?       // Hash of config for integrity
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("modules")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String
  resource    String
  details     String?  // JSON details
  ipAddress   String?
  userAgent   String?
  success     Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("audit_logs")
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum ModuleStatus {
  ACTIVE
  INACTIVE
  INSTALLED
}